import { Subscription } from "rxjs/Subscription";
import { Form, SecurityScheme } from "./thing-description";
import Servient from "./servient";
import ExposedThing from "./exposed-thing";
import { Content } from "./content";
export type PropertyContentMap = Map<string, Content>;
export type ContentListener = (data: Content) => void;
export type PropertyHandlers = {
    readHandler?: WoT.PropertyReadHandler;
    writeHandler?: WoT.PropertyWriteHandler;
    observeHandler?: WoT.PropertyReadHandler;
    unobserveHandler?: WoT.PropertyReadHandler;
};
export type PropertyHandlerMap = Map<string, PropertyHandlers>;
export type ActionHandlerMap = Map<string, WoT.ActionHandler>;
export type EventHandlers = {
    subscribe?: WoT.EventSubscriptionHandler;
    unsubscribe?: WoT.EventSubscriptionHandler;
};
export type EventHandlerMap = Map<string, EventHandlers>;
export type ListenerItem = {
    [formIndex: number]: ContentListener[];
};
export type ListenerMap = Map<string, ListenerItem>;
export interface ProtocolClient {
    readResource(form: Form): Promise<Content>;
    writeResource(form: Form, content: Content): Promise<void>;
    invokeResource(form: Form, content?: Content): Promise<Content>;
    unlinkResource(form: Form): Promise<void>;
    subscribeResource(form: Form, next: (content: Content) => void, error?: (error: Error) => void, complete?: () => void): Promise<Subscription>;
    requestThingDescription(uri: string): Promise<Content>;
    start(): Promise<void>;
    stop(): Promise<void>;
    setSecurity(metadata: Array<SecurityScheme>, credentials?: unknown): boolean;
}
export interface ProtocolClientFactory {
    readonly scheme: string;
    getClient(): ProtocolClient;
    init(): boolean;
    destroy(): boolean;
}
export interface ProtocolServer {
    readonly scheme: string;
    expose(thing: ExposedThing, tdTemplate?: WoT.ThingDescription): Promise<void>;
    destroy(thingId: string): Promise<boolean>;
    start(servient: Servient): Promise<void>;
    stop(): Promise<void>;
    getPort(): number;
}
export declare enum Endianness {
    BIG_ENDIAN = "BIG_ENDIAN",
    LITTLE_ENDIAN = "LITTLE_ENDIAN",
    BIG_ENDIAN_BYTE_SWAP = "BIG_ENDIAN_BYTE_SWAP",
    LITTLE_ENDIAN_BYTE_SWAP = "LITTLE_ENDIAN_BYTE_SWAP"
}
